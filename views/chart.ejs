<!DOCTYPE html>
<html>
  <head>
    <title>chart</title>
    <!-- <link rel="stylesheet" type="text/css" href="css/style.css"> -->
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <style>
      
    </style>
  </head>

  <body>
    <h1>chart</h1>
    <div id="chart"></div>
  </body>

  <script>
    async function readJsonData() {
      // const bmi_dist = await d3.json('http://localhost:3000/data/bmi_dist.json');
      // const bg_dist = await d3.json('http://localhost:3000/data/bg_dist.json');
      // const dbp_dist = await d3.json('http://localhost:3000/data/dbp_dist.json');
      // const hdl_dist = await d3.json('http://localhost:3000/data/hdl_dist.json');
      // const ldl_dist = await d3.json('http://localhost:3000/data/ldl_dist.json');
      // const sbp_dist = await d3.json('http://localhost:3000/data/sbp_dist.json');
      // const tg_dist = await d3.json('http://localhost:3000/data/tg_dist.json');

      const bmi = await d3.json('http://localhost:3001/data/health/bmi.json');
      const bg = await d3.json('http://localhost:3001/data/health/bg.json');
      const dbp = await d3.json('http://localhost:3001/data/health/dbp.json');
      const hdl = await d3.json('http://localhost:3001/data/health/hdl.json');
      const ldl = await d3.json('http://localhost:3001/data/health/ldl.json');
      const sbp = await d3.json('http://localhost:3001/data/health/sbp.json');
      const tg = await d3.json('http://localhost:3001/data/health/tg.json');

      return {bmi, bg, dbp, hdl, ldl, sbp, tg}
    }
    readJsonData().then(async(d) => {
      // set data
      const {bmi, bg, dbp, sbp, hdl, ldl, tg} = d;
      const data = {
        bmi: bmi,
        bg: bg,
        dbp: dbp,
        sbp: sbp,
        hdl: hdl,
        ldl: ldl,
        tg: tg
      }
      console.log(data)
      const myPoint = {
        bmi: 0.47,
        bg: 0.21,
        dbp: 0.25,
        sbp: 0,
        hdl: 0.33,
        ldl: 0.75,
        tg: 0.47
      }
      const decade = {
        bmi: 0.67,
        bg: 0.41,
        dbp: 0.55,
        sbp: 0,
        hdl: 0.43,
        ldl: 0.55,
        tg: 0.58
      }
      drawBarChart(data.tg, myPoint.tg, decade.tg)
      
      function drawBarChart(data, myPoint, decade) {
        // define margin
        const margin = {top: 50, right: 50, bottom: 50, left:50};
        const GradientBarHeight = 30;
        // using value for linear-gradient color in rect
        const colorRange = ['#6D8B6D', '#90B9AD', '#F3DF89', '#EB9263', '#E46460'];
        const color = d3.scaleLinear().range(colorRange).domain([1, 2, 3, 4, 5]);
        // draw svg
        const svg = d3.select('#chart').append('svg')
          .attr('width', 800)
          .attr('height', 300)
          .attr('transform', `translate(${margin.left}, 0)`)
        // gradient of bottom bar
        const linearGradient = svg.append('defs')
          .append("linearGradient")
          .attr("id", "linear-gradient");
  
        linearGradient.append("stop")
            .attr("offset", "0%")
            .attr("stop-color", color(1));
  
        linearGradient.append("stop")
            .attr("offset", "25%")
            .attr("stop-color", color(2));
  
        linearGradient.append("stop")
            .attr("offset", "50%")
            .attr("stop-color", color(3));
  
        linearGradient.append("stop")
            .attr("offset", "75%")
            .attr("stop-color", color(4));
  
        linearGradient.append("stop")
            .attr("offset", "100%")
            .attr("stop-color", color(5));
        // setting layout
        const width = parseInt(svg.style('width'), 10) -30
        const height = parseInt(svg.style("height"), 10);
        // define scale
        const xScale = d3.scaleBand()
          .domain(data.map((d, i) => i))
          .range([0, width])
        const yScale = d3.scaleLinear()
          .domain([0, (d3.max(data, (d) => Math.floor(Number(d.population.split('%')[0])))) + 5])
          .range([height - GradientBarHeight, 30])
  
        // Axis Y
        const yAxis = svg.append('g')
          .attr('class', 'y-axis')
          .attr('transform', 'translate(30, 0)')
  
        yAxis.append('g')
          .call(d3.axisLeft(yScale).ticks(4))
        
        // draw barchart
        const barChart = svg.append('g').attr('class', 'x-axis').attr('transform', 'translate(30, 0)')
        barChart.selectAll('rect').data(data).enter()
          .append('rect')
            .attr("width", xScale.bandwidth())
            .attr("height", (d, i) => { return height - yScale(Number(d.population.split('%')[0])) - GradientBarHeight})
            .attr('x', (d, i) => i * xScale.bandwidth())
            .attr("y", (d, i) => yScale(Number(d.population.split('%')[0])))
            .attr("fill", "#bebebe")
            .style("text-anchor", "middle")
  
        // Duplicate value
        // 값이 1개이면 내점수의 maker 높이를 다르게 하기 위한 변수 선언
        // 값이 한개이면 data-class 에 duplicate 가 들어가고 한개 이상이면 false
        const duplicate = [];
        data.forEach(d => {
          // if((d.average !== 0 && d.average >= d.begin && d.average <=d.end)) {
          if((myPoint >= d.begin && myPoint <=d.end) || ( d.average !== 0 && d.average >= d.begin && d.average <=d.end)) {
            duplicate.push(d)
          }
        })
        console.log(duplicate)
  
        // Marker
        // decade
        // 추가되어야 할 부분.
        // My point Marker
        // z-index 때문에 my-marker를 먼저 그리고 그 다음에 한국인 평균 marker 그리도록. 따라서 10년후가 제일 먼저 그려져야함
        const markerMypoint = svg.append('g')
          .attr('class', 'marker')
          .attr('transform', 'translate(30, 0)');
        // Korean average Marker
        const markerAvg = svg.append('g')
          .attr('class', 'marker')
          .attr('transform', 'translate(30, 0)');
        const locateAvg = barChart.selectAll('rect').filter(d => {return d.average !== 0 && d.average >= d.begin && d.average <=d.end})
          .attr('class', 'average');
        const r = 15; // marker 반지름
        const avgX = Number(locateAvg.attr('x')) + Number(locateAvg.attr('width')) / 2;
        const avgY = Number(locateAvg.attr('y'));
        // const avgX = locateAvg._groups[0][0].x.baseVal.value + (locateAvg._groups[0][0].width.baseVal.value / 2)
        // const avgY = locateAvg._groups[0][0].y.baseVal.value
        const defaultY = 60;
        const adjustY = avgY - defaultY + r;
        // console.log(adjustY)
        // console.log(avgY)

        // draw korean average marker
        markerAvg.append('line')
          .attr('x1', avgX)
          .attr('x2', avgX)
          .attr('y1', () => {
            if(duplicate.length === 1) {
              return avgY - 15
            } else {
              return avgY - defaultY
            }
          })
          .attr('y2', avgY)
          .attr('stroke', '#bebebe');
        markerAvg.append('circle')
          .attr('cx', avgX)
          .attr('cy', () => {
            if(duplicate.length === 1) {
              return avgY - 24
            } else {
              return avgY - defaultY
            }
          })
          .attr('r', r)
          .attr('fill', '#bebebe');
        // text in circle
        markerAvg.append('text')
          .attr('x', avgX)
          .attr('y', () => {
            if(duplicate.length === 1) {
              return avgY - 24
            } else {
              return avgY - defaultY
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('한국인');
        markerAvg.append('text')
          .attr('x', avgX)
          .attr('y', () => {
            if(duplicate.length === 1) {
              return avgY - 14
            } else {
              return avgY - defaultY + 10
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('평균');
          
        // 내 점수 marker에 id 값과 색상 부여
        barChart.selectAll('rect').filter(d => {return myPoint >= d.begin && myPoint <=d.end})
          .attr('id', 'my-point')
          .attr('fill', '#E16487');
        const point = d3.select('#my-point')
        const myX = Number(point.attr('x')) + Number(point.attr('width')) / 2
        const myY = Number(point.attr('y'))
        // const myX = point._groups[0][0].x.baseVal.value + (point._groups[0][0].width.baseVal.value / 2)
        // const myY = point._groups[0][0].y.baseVal.value
          
        // draw my point marker
        markerMypoint.append('line')
          .attr('x1', myX)
          .attr('x2', myX)
          .attr('y1', () => {
            if(duplicate.length === 1) {
              return myY - 25 - 33
            } else {
              return myY - defaultY
            }
          })
          .attr('y2', myY)
          .attr('stroke', '#E16487')
        markerMypoint.append('circle')
          .attr('cx', myX)
          .attr('cy', () => {
            if(duplicate.length === 1) {
              return myY - defaultY + 5
            } else {
              return myY - defaultY
            }
          })
          .attr('r', r)
          .attr('fill', '#E16487')
        // text in circle
        markerMypoint.append('text')
          .attr('x', myX)
          .attr('y', () => {
            if(duplicate.length === 1) {
              return myY - defaultY + 8
            } else {
              return myY - defaultY + 3
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('내점수')
  
        // draw gradient bar
        const gradientBar = svg.append("g")
          .attr('class', 'bottom-bar')
          .attr("transform", `translate(30, ${height - GradientBarHeight + 1})`)
          
        gradientBar.append('rect')
            .attr("rx", 15)
            .attr("ry", 15)
            .attr('height', 30)
            .attr('width', width)
            .attr("fill", "url(#linear-gradient)")
  
        gradientBar.append('text')
          .attr('x', margin.left)
          .attr('y', 20)
          .attr("text-anchor", "middle")
          .text('보통')
          .style('font-size', 12)
          .style('fill', '#ffffff')
  
        gradientBar.append('text')
          .attr('x', width - margin.right)
          .attr('y', 20)
          .attr("text-anchor", "middle")
          .text('주의')
          .style('font-size', 12)
          .style('fill', '#ffffff')

        const textArea = svg.append('g')
          .attr('class', 'text-area')
          .attr('transform', `translate(30, ${height})`)
          .attr('width', width)
          .attr('height', 50)

        textArea.selectAll('text').filter(d => console.log('asdasd', d))
          // .text()
      }
    })
  </script>
</html>