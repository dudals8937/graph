<!DOCTYPE html>
<html>
  <head>
    <title>chart</title>
    <!-- <link rel="stylesheet" type="text/css" href="css/style.css"> -->
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <style>
      
    </style>
  </head>

  <body>
    <h1>chart</h1>
    <div id="chart"></div>
  </body>

  <script>
    async function readJsonData() {
      // const bmi_dist = await d3.json('http://localhost:3000/data/bmi_dist.json');
      // const bg_dist = await d3.json('http://localhost:3000/data/bg_dist.json');
      // const dbp_dist = await d3.json('http://localhost:3000/data/dbp_dist.json');
      // const hdl_dist = await d3.json('http://localhost:3000/data/hdl_dist.json');
      // const ldl_dist = await d3.json('http://localhost:3000/data/ldl_dist.json');
      // const sbp_dist = await d3.json('http://localhost:3000/data/sbp_dist.json');
      // const tg_dist = await d3.json('http://localhost:3000/data/tg_dist.json');
      const hair = await d3.json('http://localhost:3001/data/beauty/hair.json');
      const hairLoss = await d3.json('http://localhost:3001/data/beauty/hairLoss.json');
      const caffeine = await d3.json('http://localhost:3001/data/beauty/caffeine.json');
      const vitaminc = await d3.json('http://localhost:3001/data/beauty/vitaminc.json');
      const skinAging = await d3.json('http://localhost:3001/data/beauty/skinAging.json');
      const pigmentation = await d3.json('http://localhost:3001/data/beauty/pigmentation.json');
      const skinElasticity = await d3.json('http://localhost:3001/data/beauty/skinElasticity.json');

      const bmi = await d3.json('http://localhost:3001/data/health/bmi.json');
      const bg = await d3.json('http://localhost:3001/data/health/bg.json');
      const dbp = await d3.json('http://localhost:3001/data/health/dbp.json');
      const hdl = await d3.json('http://localhost:3001/data/health/hdl.json');
      const ldl = await d3.json('http://localhost:3001/data/health/ldl.json');
      const sbp = await d3.json('http://localhost:3001/data/health/sbp.json');
      const tg = await d3.json('http://localhost:3001/data/health/tg.json');

      return {hair, hairLoss, caffeine, vitaminc, skinAging, skinElasticity, pigmentation, bmi, bg, dbp, hdl, ldl, sbp, tg}
    }
    readJsonData().then(async(d) => {
      // set data
      const {hair, hairLoss, caffeine, vitaminc, skinAging, skinElasticity, pigmentation, bmi, bg, dbp, sbp, hdl, ldl, tg} = d;
      const data = {
        hair: hair,
        hairLoss: hairLoss,
        caffeine: caffeine,
        vitaminc: vitaminc,
        skinAging: skinAging,
        skinElasticity: skinElasticity,
        pigmentation: pigmentation,
        bmi: bmi,
        bg: bg,
        dbp: dbp,
        sbp: sbp,
        hdl: hdl,
        ldl: ldl,
        tg: tg
      }
      console.log(data)
      const myPoint = {
        hair: 0.35,
        hairLoss: 0.78,
        caffeine: 0.1,
        vitaminc: 0.7,
        skinAging: 0.2,
        skinElasticity: 0.5,
        pigmentation: 0.8,
        bmi: 0.47,
        bg: 0.21,
        dbp: 0.25,
        sbp: 0,
        hdl: 0.33,
        ldl: 0.75,
        tg: 0.55 // 0.47
      }
      const decade = {
        bmi: 0.27,
        bg: 0.41,
        dbp: 0.55,
        sbp: 0,
        hdl: 0.43,
        ldl: 0.55,
        tg: 0.58
      }
      drawBarChart(data.bmi, myPoint.bmi, decade.bmi)
      
      function drawBarChart(data, myPoint, decade) {
        console.log(typeof decade != 'undefiend' && decade != '');
        // define margin
        const margin = {top: 50, right: 50, bottom: 50, left:50};
        const GradientBarHeight = 30;
        // using value for linear-gradient color in rect
        const colorRange = ['#6D8B6D', '#90B9AD', '#F3DF89', '#EB9263', '#E46460'];
        const color = d3.scaleLinear().range(colorRange).domain([1, 2, 3, 4, 5]);
        // draw svg
        const svg = d3.select('#chart').append('svg')
          .attr('width', 850)
          .attr('height', 300)
          .attr('transform', `translate(${margin.left}, 0)`)
        // gradient of bottom bar

        const chart = svg.append('g')
          .attr('class', 'chart')
          .attr('transform', 'translate(50, 0)')
        const linearGradient = chart.append('defs')
          .append("linearGradient")
          .attr("id", "linear-gradient");
  
        linearGradient.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(1));
  
        linearGradient.append("stop")
          .attr("offset", "25%")
          .attr("stop-color", color(2));
  
        linearGradient.append("stop")
          .attr("offset", "50%")
          .attr("stop-color", color(3));
  
        linearGradient.append("stop")
          .attr("offset", "75%")
          .attr("stop-color", color(4));
  
        linearGradient.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(5));
        // setting layout
        const width = parseInt(svg.style('width'), 10) -150
        console.log(width)
        const height = parseInt(svg.style("height"), 10);
        // define scale
        const xScale = d3.scaleBand()
          .domain(data.map((d, i) => i))
          .range([0, width])
        const yScale = d3.scaleLinear()
          .domain([0, (d3.max(data, (d) => Math.floor(Number(d.population.split('%')[0])))) + 5])
          .range([height - GradientBarHeight, 70])
                    
        // Axis Y
        const yAxis = chart.append('g')
          .attr('class', 'y-axis')
          .attr('transform', 'translate(30, 0)')
  
        yAxis.append('g')
          .call(d3.axisLeft(yScale).ticks(4))

        const yAxisName = chart.append('g')
          .attr('class', 'population')
          .attr('transform', 'translate(30, 0)')

        yAxisName.append('text')
          .attr('x', 0)
          .attr('y', 20)
          .attr("text-anchor", "middle")
          .text('인구비율(%)')
          .style('font-size', 11)
          .style('fill', '#181818')
        
        // draw barchart
        const barChart = chart.append('g').attr('class', 'x-axis').attr('transform', 'translate(30, 0)')
        barChart.selectAll('rect').data(data).enter()
          .append('rect')
            .attr("width", xScale.bandwidth())
            .attr("height", (d, i) => { return height - yScale(Number(d.population.split('%')[0])) - GradientBarHeight})
            .attr('x', (d, i) => i * xScale.bandwidth())
            .attr("y", (d, i) => yScale(Number(d.population.split('%')[0])))
            .attr("fill", "#bebebe")
            .style("text-anchor", "middle")
  
        // Duplicate value
        // 각 maker 높이를 다르게 하기 위한 변수 선언
        // duplicate 는 평균값이 포함된 데이터 구간에 myPoint 또는 decade값이 일치하는경우 key: value값을 넣어준다.
        // duplicate2 는 myPoint의 구간에 decade값이 있는경우 key: value값을 넣어준다.
        // line, circle, text의 y2에서 해당 구간(duplicate, duplicate2)에 myPoint, decade 값이 있는지 체크하여 분기를 나눠줌으로써 높이를 설정한다.
        let duplicate = [];
        let duplicate2 = [];
        data.forEach(d => {
          if(d.average !== 0 && d.average >= d.begin && d.average <= d.end) {
            duplicate = d;
            if(myPoint >= duplicate.begin && myPoint <= duplicate.end) {
              duplicate.myPoint = myPoint
            } 
            if(decade >= d.begin && decade <=d.end) {
              duplicate.decade = decade
            }
          }
        });
        // console.log(duplicate)

        data.forEach(d => {
          if(myPoint >= d.begin && myPoint <= d.end) {
            duplicate2 = d;
            if(decade >= duplicate2.begin && decade <= duplicate2.end) {
              duplicate2.decade = decade
            }
          }
        })
        // console.log(duplicate2)
        // data.forEach(d => {
        //   // if((d.average !== 0 && d.average >= d.begin && d.average <=d.end)) {
        //   if((myPoint >= d.begin && myPoint <=d.end) || ( d.average !== 0 && d.average >= d.begin && d.average <=d.end) || (decade >= d.begin && decade <=d.end)) {
        //     duplicate.push(d)
        //   }
        // })
        
                  
        // Marker
        // decade
        const markerAfter10Year = chart.append('g')
			    .attr('class', 'marker')
			    .attr('transform', 'translate(30, 0)');
        // My point Marker
        // z-index 때문에 my-marker를 먼저 그리고 그 다음에 한국인 평균 marker 그리도록. 따라서 10년후가 제일 먼저 그려져야함
        const markerMypoint = chart.append('g')
          .attr('class', 'marker')
          .attr('transform', 'translate(30, 0)');
        // Korean average Marker
        const markerAvg = chart.append('g')
          .attr('class', 'marker')
          .attr('transform', 'translate(30, 0)');
        const locateAvg = barChart.selectAll('rect').filter(d => {return d.average !== 0 && d.average >= d.begin && d.average <=d.end})
          .attr('class', 'average');
        const r = 15; // marker 반지름
        const avgX = Number(locateAvg.attr('x')) + Number(locateAvg.attr('width')) / 2;
        const avgY = Number(locateAvg.attr('y'));
        // const avgX = locateAvg._groups[0][0].x.baseVal.value + (locateAvg._groups[0][0].width.baseVal.value / 2)
        // const avgY = locateAvg._groups[0][0].y.baseVal.value
        const defaultY = 60;
        const adjustY = avgY - defaultY + r;
        // console.log(adjustY)
        // console.log(avgY)

        // draw korean average marker
        markerAvg.append('line')
          .attr('x1', avgX)
          .attr('x2', avgX)
          .attr('y1', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 15
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 15
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 15
            } else {
              return avgY - defaultY
            }
          })
          .attr('y2', avgY)
          .attr('stroke', '#bebebe');
        markerAvg.append('circle')
          .attr('cx', avgX)
          .attr('cy', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 24
            } else {
              return avgY - defaultY
            }
          })
          .attr('r', r)
          .attr('fill', '#bebebe');
        // text in circle
        markerAvg.append('text')
          .attr('x', avgX)
          .attr('y', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 24
            } else {
              return avgY - defaultY
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('한국인');
        markerAvg.append('text')
          .attr('x', avgX)
          .attr('y', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 14
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 14
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 14
            } else {
              return avgY - defaultY + 10
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('평균');
          
        // 내 점수 marker에 id 값과 색상 부여
        barChart.selectAll('rect').filter(d => {return myPoint >= d.begin && myPoint <=d.end})
          .attr('id', 'my-point')
          .attr('fill', '#E16487');
        const point = d3.select('#my-point')
        const myX = Number(point.attr('x')) + Number(point.attr('width')) / 2
        const myY = Number(point.attr('y'))
        // const myX = point._groups[0][0].x.baseVal.value + (point._groups[0][0].width.baseVal.value / 2)
        // const myY = point._groups[0][0].y.baseVal.value
          
        // draw my point marker
        markerMypoint.append('line')
          .attr('x1', myX)
          .attr('x2', myX)
          .attr('y1', () => {
            if(duplicate2.decade && duplicate2.average === 0) {
              return myY - 15
            } else if (duplicate2.decade && duplicate2.average > 0) {
              return myY - defaultY
            } else {
              return myY - defaultY
            }
          })
          .attr('y2', myY)
          .attr('stroke', '#E16487')
        markerMypoint.append('circle')
          .attr('cx', myX)
          .attr('cy', () => {
            if(duplicate2.decade && duplicate2.average === 0) {
              return myY - 25
            } else if (duplicate2.decade && duplicate2.average > 0) {
              return myY - defaultY
            } else {
              return myY - defaultY
            }
          })
          .attr('r', r)
          .attr('fill', '#E16487')
        // text in circle
        markerMypoint.append('text')
          .attr('x', myX)
          .attr('y', () => {
            if(duplicate2.decade && duplicate2.average === 0) {
              return myY - defaultY + 38
            } else if (duplicate2.decade && duplicate2.average > 0) {
              return myY - defaultY + 3
            } else {
              return myY - defaultY + 3
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('내점수')

        const after10year = barChart.selectAll('rect').filter(d => {return decade >= d.begin && decade <=d.end})
          .attr('class', 'after10year')

        const decadeX = Number(after10year.attr('x')) + Number(after10year.attr('width')) / 2
        const decadeY = Number(after10year.attr('y'))

        markerAfter10Year.append('line')
          .attr('x1', decadeX)
          .attr('x2', decadeX)
          .attr('y1', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return decadeY - 98
            } else if (!duplicate.myPoint && duplicate.decade) {
              return decadeY - defaultY
            } else if (duplicate.myPoint && !duplicate.decade) {
              return decadeY - defaultY
            } else {
              return decadeY - defaultY
            }
          })
          .attr('y2', decadeY)
          .attr('stroke', '#28a8a8')

          markerAfter10Year.append('circle')
          .attr('cx', decadeX)
          .attr('cy', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return decadeY - defaultY - 40
            } else if (!duplicate.myPoint && duplicate.decade) {
              return decadeY - defaultY
            } else if (duplicate.myPoint && !duplicate.decade) {
              return decadeY - defaultY
            } else {
              return decadeY - defaultY
            }
          })
          .attr('r', r)
          .attr('fill', '#28a8a8')

        markerMypoint.append('text')
          .attr('x', decadeX)
          .attr('y', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return decadeY - defaultY - 40
            } else if (!duplicate.myPoint && duplicate.decade) {
              return decadeY - defaultY
            } else if (duplicate.myPoint && !duplicate.decade) {
              return decadeY - defaultY
            } else {
              return decadeY - defaultY
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('10년후')

        markerMypoint.append('text')
          .attr('x', decadeX)
          .attr('y', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return decadeY - defaultY - 30
            } else if (!duplicate.myPoint && duplicate.decade) {
              return decadeY - defaultY + 10
            } else if (duplicate.myPoint && !duplicate.decade) {
              return decadeY - defaultY + 10
            } else {
              return decadeY - defaultY + 10
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('예측')
        // draw gradient bar
        const gradientBar = chart.append("g")
          .attr('class', 'bottom-bar')
          .attr("transform", `translate(30, ${height - GradientBarHeight + 1})`)
          
        gradientBar.append('rect')
          .attr("rx", 15)
          .attr("ry", 15)
          .attr('height', 30)
          .attr('width', width)
          .attr("fill", "url(#linear-gradient)")
  
        gradientBar.append('text')
          .attr('x', margin.left)
          .attr('y', 20)
          .attr("text-anchor", "middle")
          .text('보통')
          .style('font-size', 12)
          .style('fill', '#ffffff')
  
        gradientBar.append('text')
          .attr('x', width - margin.right)
          .attr('y', 20)
          .attr("text-anchor", "middle")
          .text('주의')
          .style('font-size', 12)
          .style('fill', '#ffffff')
        
        // side text area
        let text = '';
        switch (data[0].begin) {
          case "-0.025":
            text = '혈당';
            break;
          case "-0.011":
            text = '체질량지수';
            break;
          case "-0.01703704":
            text = '혈압';
            break;
          case "-0.015":
            text = 'HDL콜레스테롤';
            break;
          case "-0.020909091":
            text = 'LDL콜레스테롤';
            break;
          case "-0.01751852":
            text = `중성지방`;
            break;
        }
        const downTextArea = chart.append('g')
          .attr('class', 'text-area')
          .attr('transform', `translate(-10, ${height - 22})`)
          .attr("text-anchor", "middle")
        downTextArea.append('text').text(text)
          .attr('font-size', 10)
        downTextArea.append('text').text('낮아짐')
          .attr('transform', `translate(0, 20)`)

        const upTextArea = chart.append('g')
          .attr('class', 'text-area')
          .attr('transform', `translate(${width + 60}, ${height - 22})`)
          .attr("text-anchor", "middle")
        upTextArea.append('text').text(text)
          .attr('font-size', 10)
        upTextArea.append('text').text('높아짐')
          .attr('transform', `translate(0, 20)`)
      }
    })
  </script>
</html>