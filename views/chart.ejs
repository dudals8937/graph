<!DOCTYPE html>
<html>
  <head>
    <title>chart</title>
    <!-- <link rel="stylesheet" type="text/css" href="css/style.css"> -->
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <style>
      
    </style>
  </head>

  <body>
    <h1>chart</h1>
    <div id="chart01"></div>
    <div id="chart02"></div>
    <div id="chart03"></div>
    <div id="chart04"></div>
    <div id="chart05"></div>
    <div id="chart06"></div>
    <div id="chart07"></div>
    <div id="chart08"></div>
    <div id="chart09"></div>
    <div id="chart10"></div>
    <div id="chart11"></div>
    <div id="chart12"></div>
    <div id="chart13"></div>
  </body>

  <script>
    async function readJsonData() {
      // const bmi_dist = await d3.json('http://localhost:3000/data/bmi_dist.json');
      // const bg_dist = await d3.json('http://localhost:3000/data/bg_dist.json');
      // const dbp_dist = await d3.json('http://localhost:3000/data/dbp_dist.json');
      // const hdl_dist = await d3.json('http://localhost:3000/data/hdl_dist.json');
      // const ldl_dist = await d3.json('http://localhost:3000/data/ldl_dist.json');
      // const sbp_dist = await d3.json('http://localhost:3000/data/sbp_dist.json');
      // const tg_dist = await d3.json('http://localhost:3000/data/tg_dist.json');
      const hair = await d3.json('http://localhost:3001/data/beauty/hair.json');
      const hairLoss = await d3.json('http://localhost:3001/data/beauty/hairLoss.json');
      const caffeine = await d3.json('http://localhost:3001/data/beauty/caffeine.json');
      const vitaminc = await d3.json('http://localhost:3001/data/beauty/vitaminc.json');
      const skinAging = await d3.json('http://localhost:3001/data/beauty/skinAging.json');
      const pigmentation = await d3.json('http://localhost:3001/data/beauty/pigmentation.json');
      const skinElasticity = await d3.json('http://localhost:3001/data/beauty/skinElasticity.json');

      const bmi = await d3.json('http://localhost:3001/data/health/bmi.json');
      const bg = await d3.json('http://localhost:3001/data/health/bg.json');
      const dbp = await d3.json('http://localhost:3001/data/health/dbp.json');
      const hdl = await d3.json('http://localhost:3001/data/health/hdl.json');
      const ldl = await d3.json('http://localhost:3001/data/health/ldl.json');
      const sbp = await d3.json('http://localhost:3001/data/health/sbp.json');
      const tg = await d3.json('http://localhost:3001/data/health/tg.json');

      return {hair, hairLoss, caffeine, vitaminc, skinAging, skinElasticity, pigmentation, bmi, bg, dbp, hdl, ldl, sbp, tg}
    }
    readJsonData().then(async(d) => {
      // set data
      const {hair, hairLoss, caffeine, vitaminc, skinAging, skinElasticity, pigmentation, bmi, bg, dbp, sbp, hdl, ldl, tg} = d;
      const data = {
        hair: hair,
        hairLoss: hairLoss,
        caffeine: caffeine,
        vitaminc: vitaminc,
        skinAging: skinAging,
        skinElasticity: skinElasticity,
        pigmentation: pigmentation,
        bmi: bmi,
        bg: bg,
        dbp: dbp,
        hdl: hdl,
        ldl: ldl,
        tg: tg
      }
      console.log(data)
      const koreanAvg = {
        skinElasticity: 1,
        pigmentation: 1,
        skinAging: 0,
        hairLoss: 3,
        hair: 2,
        vitaminc: 2,
        caffeine: 1,
        bmi: 24.90863,
        tg: 1.568435,
        ldl: 120.7607,
        hdl: 48.92688,
        bg: 4.543358,
        dbp: 78.44469
      }
      const myPoint = {
        skinElasticity: 0,
        pigmentation: 1,
        skinAging: 2,
        hairLoss: 3,
        hair: 1,
        vitaminc: 1,
        caffeine: 1,
        bmi: 24.7,
        tg: 1.52, // 0.47
        ldl: 128,
        hdl: 48,
        bg: 4.52,
        dbp: 63
      }
      const decade = {
        skinElasticity: null,
        pigmentation: null,
        caffeine: null,
        hairLoss: null,
        vitaminc: null,
        skinAging: null,
        hair: null,
        hairLoss: null,
        bmi: 19,
        bg: 4.6,
        dbp: 82,
        sbp: 0,
        hdl: 48,
        ldl: 128,
        tg: 1.62
      }

      const division = {
        skinElasticity: ['양호','주의'],
        pigmentation: ['좋음','보통','주의'],
        skinAging: ['좋음','보통'],
        hairLoss: ['양호','주의'],
        hair: ['굵음','보통'],
        vitaminc: ['양호','주의'],
        caffeine: ['보통','좋음'],
        bmi: ['관심(저체질량)','보통','관심(고체질량)', '주의'],
        tg: ['좋음','보통','관심','주의'],
        ldl: ['좋음','보통','관심','주의'],
        hdl: ['주의', '관심', '보통', '좋음'],
        bg: ['양호','관심','주의'],
        dbp: ['관심(저혈압)','보통', '관심(고혈압)', '주의'],
      }

      const barIndex = {
        skinElasticity: [1],
        pigmentation: [0, 2],
        skinAging: [0],
        hairLoss: [2],
        hair: [1],
        vitaminc: [1],
        caffeine: [2],
        bmi: [2, 7, 12],
        tg: [0, 9, 13],
        ldl: [3, 9, 12],
        hdl: [3, 9, 11],
        bg: [10, 13],
        dbp: [3, 8, 11],
      }

      function drawChart() {
        drawBarChart('#chart01', data.skinElasticity, koreanAvg.skinElasticity, myPoint.skinElasticity, decade.skinElasticity, division.skinElasticity, barIndex.skinElasticity)
        drawBarChart('#chart02', data.pigmentation, koreanAvg.pigmentation, myPoint.pigmentation, decade.pigmentation, division.pigmentation, barIndex.pigmentation)
        drawBarChart('#chart03', data.skinAging, koreanAvg.skinAging, myPoint.skinAging, decade.skinAging, division.skinAging, barIndex.skinAging)
        drawBarChart('#chart04', data.hairLoss, koreanAvg.hairLoss, myPoint.hairLoss, decade.hairLoss, division.hairLoss, barIndex.hairLoss)
        drawBarChart('#chart05', data.hair, koreanAvg.hair, myPoint.hair, decade.hair, division.hair, barIndex.hair)
        drawBarChart('#chart06', data.vitaminc, koreanAvg.vitaminc, myPoint.vitaminc, decade.vitaminc, division.vitaminc, barIndex.vitaminc)
        drawBarChart('#chart07', data.caffeine, koreanAvg.caffeine, myPoint.caffeine, decade.caffeine, division.caffeine, barIndex.caffeine)
        drawBarChart('#chart08', data.bmi, koreanAvg.bmi, myPoint.bmi, decade.bmi, division.bmi, barIndex.bmi)
        drawBarChart('#chart09', data.tg, koreanAvg.tg, myPoint.tg, decade.tg, division.tg, barIndex.tg)
        drawBarChart('#chart10', data.ldl, koreanAvg.ldl, myPoint.ldl, decade.ldl, division.ldl, barIndex.ldl)
        drawBarChart('#chart11', data.hdl, koreanAvg.hdl, myPoint.hdl, decade.hdl, division.hdl, barIndex.hdl)
        drawBarChart('#chart12', data.bg, koreanAvg.bg, myPoint.bg, decade.bg, division.bg, barIndex.bg)
        drawBarChart('#chart13', data.dbp, koreanAvg.dbp, myPoint.dbp, decade.dbp, division.dbp, barIndex.dbp)
      }
      drawChart()
      function drawBarChart(obj, data, korAvg, myPoint, decade, division, barIndex) {
        
        // define margin
        const margin = {top: 50, right: 50, bottom: 50, left:50};
        const GradientBarHeight = 30;
        // using value for linear-gradient color in rect
        // const colorRange = ['#6D8B6D', '#90B9AD', '#F3DF89', '#EB9263', '#E46460'];
        const colorRange = ['#9ac676', '#bec74a', '#ffbf00', '#ea5a26', '#db2b41'];
        const color = d3.scaleLinear().range(colorRange).domain([1, 2, 3, 4, 5]);
        // draw svg
        const svg = d3.select(obj).append('svg')
          .attr('width', 654)
          .attr('height', 300)
          .attr('transform', `translate(${margin.left}, 0)`)
        // gradient of bottom bar

        const chart = svg.append('g')
          .attr('class', 'chart')
          .attr('transform', 'translate(50, 0)')
        const linearGradient = chart.append('defs')
          .append("linearGradient")
          .attr("id", "linear-gradient");
  
        linearGradient.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(1));
  
        linearGradient.append("stop")
          .attr("offset", "25%")
          .attr("stop-color", color(2));
  
        linearGradient.append("stop")
          .attr("offset", "50%")
          .attr("stop-color", color(3));
  
        linearGradient.append("stop")
          .attr("offset", "75%")
          .attr("stop-color", color(4));
  
        linearGradient.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(5));

        // barIndex.length === 1
        const length1_1 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length1-1");

        length1_1.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(1));
  
        length1_1.append("stop")
          .attr("offset", "80%")
          .attr("stop-color", color(2));

        length1_1.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(3));

        const length1_2 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length1-2");

        length1_2.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(3));
  
        length1_2.append("stop")
          .attr("offset", "20%")
          .attr("stop-color", color(3));

        length1_2.append("stop")
          .attr("offset", "70%")
          .attr("stop-color", color(4));

        length1_2.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(5));

        // barIndex.length === 2
        const length2_1 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length2-1");

        length2_1.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(1));
  
        length2_1.append("stop")
          .attr("offset", "80%")
          .attr("stop-color", color(2));

        length2_1.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(3));

        const length2_2 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length2-2");

        length2_2.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(3));
  
        length2_2.append("stop")
          .attr("offset", "50%")
          .attr("stop-color", color(3));

        length2_2.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(3));

        const length2_3 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length2-3");

        length2_3.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(3));
  
        length2_3.append("stop")
          .attr("offset", "50%")
          .attr("stop-color", color(4));

        length2_3.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(5));

        // barIndex.length === 3

        const length3_1 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length3-1");

        length3_1.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(1));
  
        length3_1.append("stop")
          .attr("offset", "70%")
          .attr("stop-color", color(2));

        length3_1.append("stop")
          .attr("offset", "110%")
          .attr("stop-color", color(2));

        const length3_2 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length3-2");

        length3_2.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(2));
  
        length3_2.append("stop")
          .attr("offset", "92%")
          .attr("stop-color", color(3));

        length3_2.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(3));

        const length3_3 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length3-3");

        length3_3.append("stop")
          .attr("offset", "80%")
          .attr("stop-color", color(3));
  
        // linearGradient3.append("stop")
        //   .attr("offset", "90%")
        //   .attr("stop-color", color(4));

        length3_3.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(3));

        const length3_4 = chart.append('defs')
          .append("linearGradient")
          .attr("id", "length3-4");

        length3_4.append("stop")
          .attr("offset", "0%")
          .attr("stop-color", color(3));

        length3_4.append("stop")
          .attr("offset", "30%")
          .attr("stop-color", color(4));

        length3_4.append("stop")
          .attr("offset", "100%")
          .attr("stop-color", color(5));
        // setting layout
        const width = parseInt(svg.style('width'), 10) -150
        const height = parseInt(svg.style("height"), 10);
        // define scale
        const xScale = d3.scaleBand()
          .domain(data.map((d, i) => i))
          .range([0, width])
        const yScale = d3.scaleLinear()
          .domain([0, (d3.max(data, (d) => Math.floor(d.population))) + 5])
          .range([height - GradientBarHeight, 70])
                    
        // Axis Y
        const yAxis = chart.append('g')
          .attr('class', 'y-axis')
          .attr('transform', 'translate(30, 0)')
  
        yAxis.append('g')
          .call(d3.axisLeft(yScale).ticks(4).tickSize(0))

        d3.select('.domain')
          .attr("stroke-opacity", 0.4)

        d3.selectAll('.tick line')
          .style('display', 'none')

        d3.selectAll('.tick text')
          .attr('x', '-7')

        const yAxisName = chart.append('g')
          .attr('class', 'population')
          .attr('transform', 'translate(30, 20)')

        yAxisName.append('text')
          .attr('x', 0)
          .attr('y', 20)
          .attr("text-anchor", "middle")
          .text('인구비율(%)')
          .style('font-size', 11)
          .style('fill', '#181818')
        
        // draw barchart
        const barChart = chart.append('g').attr('class', 'x-axis').attr('transform', 'translate(30, 0)')
        barChart.selectAll('rect').data(data).enter()
          .append('rect')
            .attr("width", xScale.bandwidth())
            .attr("height", (d, i) => { return height - yScale(d.population) - GradientBarHeight})
            .attr('x', (d, i) => i * xScale.bandwidth())
            .attr("y", (d, i) => yScale(d.population))
            .attr("fill", "#E7E6E6")
            .style("text-anchor", "middle")
  
        // Duplicate value
        // 각 maker 높이를 다르게 하기 위한 변수 선언
        // duplicate 는 평균값이 포함된 데이터 구간에 myPoint 또는 decade값이 일치하는경우 key: value값을 넣어준다.
        // duplicate2 는 myPoint의 구간에 decade값이 있는경우 key: value값을 넣어준다.
        // line, circle, text의 y2에서 해당 구간(duplicate, duplicate2)에 myPoint, decade 값이 있는지 체크하여 분기를 나눠줌으로써 높이를 설정한다.
        let duplicate = [];
        let duplicate2 = [];
        data.forEach(d => {
          if(korAvg >= d.begin && korAvg <= d.end) {
            duplicate = d;
            if(myPoint >= duplicate.begin && myPoint <= duplicate.end) {
              duplicate.myPoint = myPoint
            } 
            if(decade >= d.begin && decade <=d.end) {
              duplicate.decade = decade
            }
          }
        });
        console.log('dupli1', duplicate)

        data.forEach(d => {
          if(myPoint >= d.begin && myPoint <= d.end) {
            duplicate2 = d;
            if(decade >= duplicate2.begin && decade <= duplicate2.end) {
              duplicate2.decade = decade
            }
          }
        })
        console.log('dupli2', duplicate2)
        // data.forEach(d => {
        //   // if((d.average !== 0 && d.average >= d.begin && d.average <=d.end)) {
        //   if((myPoint >= d.begin && myPoint <=d.end) || ( d.average !== 0 && d.average >= d.begin && d.average <=d.end) || (decade >= d.begin && decade <=d.end)) {
        //     duplicate.push(d)
        //   }
        // })
        
                  
        // Marker
        // decade
        const markerAfter10Year = chart.append('g')
			    .attr('class', 'markerAfter10Year')
			    .attr('transform', 'translate(30, 0)');
        // My point Marker
        // z-index 때문에 my-marker를 먼저 그리고 그 다음에 한국인 평균 marker 그리도록. 따라서 10년후가 제일 먼저 그려져야함
        const markerMypoint = chart.append('g')
          .attr('class', 'markerMypoint')
          .attr('transform', 'translate(30, 0)');
        // Korean average Marker
        const markerAvg = chart.append('g')
          .attr('class', 'markerAvg')
          .attr('transform', 'translate(30, 0)');
        const locateAvg = barChart.selectAll('rect').filter(d => {return korAvg >= d.begin && korAvg <=d.end})
          .attr('class', 'average');
        const r = 16; // marker 반지름
        const avgX = Number(locateAvg.attr('x')) + Number(locateAvg.attr('width')) / 2;
        const avgY = Number(locateAvg.attr('y'));
        // const avgX = locateAvg._groups[0][0].x.baseVal.value + (locateAvg._groups[0][0].width.baseVal.value / 2)
        // const avgY = locateAvg._groups[0][0].y.baseVal.value
        const defaultY = 60;
        const adjustY = avgY - defaultY + r;
        // console.log(adjustY)
        // console.log(avgY)

        // draw korean average marker
        markerAvg.append('line')
          .attr('x1', avgX)
          .attr('x2', avgX)
          .attr('y1', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 15
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 15
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 15
            } else {
              return avgY - defaultY
            }
          })
          .attr('y2', avgY)
          .attr('stroke', '#bebebe');
        markerAvg.append('circle')
          .attr('cx', avgX)
          .attr('cy', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 24
            } else {
              return avgY - defaultY
            }
          })
          .attr('r', r)
          .attr('fill', '#bebebe');
        // text in circle
        markerAvg.append('text')
          .attr('x', avgX)
          .attr('y', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 24
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 24
            } else {
              return avgY - defaultY
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('한국인');
        markerAvg.append('text')
          .attr('x', avgX)
          .attr('y', () => {
            if(duplicate.myPoint && duplicate.decade) {
              return avgY - 14
            } else if (!duplicate.myPoint && duplicate.decade) {
              return avgY - 14
            } else if (duplicate.myPoint && !duplicate.decade) {
              return avgY - 14
            } else {
              return avgY - defaultY + 10
            }
          })
          .attr('fill', '#ffffff')
          .attr("text-anchor", "middle")
          .style('font-size', 9)
          .style('font-weight', 'bold')
          .text('평균');
        
        // 내 점수 marker에 id 값과 색상 부여
        // 뷰티는 내점수가 인자값, 헬스는 실제값이므로 rect를 선택하는 분기가 달라야 함

        // let point, myX, myY
        // if(decade === null) {
        //   barChart.selectAll('rect').filter(function (d, i) {
        //     return myPoint + 3 === i
        //   })
        //   .attr('id', 'my-point')
        //   .attr('fill', '#F2708B');

        //   point = d3.select('#my-point')
        //   myX = Number(point.attr('x')) + Number(point.attr('width')) / 2
        //   myY = Number(point.attr('y'))
        // } else {
        //   barChart.selectAll('rect').filter(function (d) {return myPoint >= d.begin && myPoint <=d.end})
        //   .attr('id', 'my-point')
        //   .attr('fill', '#F2708B');

        //   point = d3.select('#my-point')
        //   myX = Number(point.attr('x')) + Number(point.attr('width')) / 2
        //   myY = Number(point.attr('y'))
        // }
        // barChart.selectAll('rect').filter(function (d, i) {
        //   return myPoint + 3 === i
        // })
        // barChart.selectAll('rect').filter(function (d) {return myPoint >= d.begin && myPoint <=d.end})

        console.log('내점수', myPoint)
        if (decade === null) {
          const point = barChart.selectAll('rect').filter(function (d, i) {
            return myPoint + 3 === i
          })
            .attr('class', 'my-point')
            .attr('fill', '#F2708B');
          const myX = Number(point.attr('x')) + Number(point.attr('width')) / 2
          const myY = Number(point.attr('y'))
          // const myX = point._groups[0][0].x.baseVal.value + (point._groups[0][0].width.baseVal.value / 2)
          // const myY = point._groups[0][0].y.baseVal.value
            
          // draw my point marker
          markerMypoint.append('line')
            .attr('x1', myX)
            .attr('x2', myX)
            .attr('y1', () => {
              if(duplicate2.decade && duplicate2.average === 0) {
                return myY - 15
              } else if (duplicate2.decade && duplicate2.average > 0) {
                return myY - defaultY
              } else {
                return myY - defaultY
              }
            })
            .attr('y2', myY)
            .attr('stroke', '#F2708B')
          markerMypoint.append('circle')
            .attr('cx', myX)
            .attr('cy', () => {
              if(duplicate2.decade && duplicate2.average === 0) {
                return myY - 25
              } else if (duplicate2.decade && duplicate2.average > 0) {
                return myY - defaultY
              } else {
                return myY - defaultY
              }
            })
            .attr('r', r)
            .attr('fill', '#F2708B')
          // text in circle
          markerMypoint.append('text')
            .attr('x', myX)
            .attr('y', () => {
              if(duplicate2.decade && duplicate2.average === 0) {
                return myY - defaultY + 38
              } else if (duplicate2.decade && duplicate2.average > 0) {
                return myY - defaultY + 3
              } else {
                return myY - defaultY + 3
              }
            })
            .attr('fill', '#ffffff')
            .attr("text-anchor", "middle")
            .style('font-size', 9)
            .style('font-weight', 'bold')
            .text('내점수')
        } else {
          const point = barChart.selectAll('rect')
          
          if( data[0].begin > myPoint ) {
            point.filter(function (d, i, array) {
              return i == 3 
            })
            .attr('class', 'my-point')
            .attr('fill', '#F2708B');
          }

          point.filter(function (d, i, array) {
            return myPoint >= d.begin && myPoint <=d.end
          })
            .attr('class', 'my-point')
            .attr('fill', '#F2708B');
          const myX = Number(point.attr('x')) + Number(point.attr('width')) / 2
          const myY = Number(point.attr('y'))
          // const myX = point._groups[0][0].x.baseVal.value + (point._groups[0][0].width.baseVal.value / 2)
          // const myY = point._groups[0][0].y.baseVal.value
            
          // draw my point marker
          markerMypoint.append('line')
            .attr('x1', myX)
            .attr('x2', myX)
            .attr('y1', () => {
              if(duplicate2.decade && duplicate2.average === 0) {
                return myY - 15
              } else if (duplicate2.decade && duplicate2.average > 0) {
                return myY - defaultY
              } else {
                return myY - defaultY
              }
            })
            .attr('y2', myY)
            .attr('stroke', '#F2708B')
          markerMypoint.append('circle')
            .attr('cx', myX)
            .attr('cy', () => {
              if(duplicate2.decade && duplicate2.average === 0) {
                return myY - 25
              } else if (duplicate2.decade && duplicate2.average > 0) {
                return myY - defaultY
              } else {
                return myY - defaultY
              }
            })
            .attr('r', r)
            .attr('fill', '#F2708B')
          // text in circle
          markerMypoint.append('text')
            .attr('x', myX)
            .attr('y', () => {
              if(duplicate2.decade && duplicate2.average === 0) {
                return myY - defaultY + 38
              } else if (duplicate2.decade && duplicate2.average > 0) {
                return myY - defaultY + 3
              } else {
                return myY - defaultY + 3
              }
            })
            .attr('fill', '#ffffff')
            .attr("text-anchor", "middle")
            .style('font-size', 9)
            .style('font-weight', 'bold')
            .text('내점수')
        }

        if(decade !== null) {

          const after10year = barChart.selectAll('rect').filter((d, i) => {
            if(d.begin > decade) {
              return d[0]
            }
            return decade >= d.begin && decade <=d.end
          })
            .attr('class', 'after10year')

          const decadeX = Number(after10year.attr('x')) + Number(after10year.attr('width')) / 2
          const decadeY = Number(after10year.attr('y'))

          markerAfter10Year.append('line')
            .attr('x1', decadeX)
            .attr('x2', decadeX)
            .attr('y1', () => {
              if(duplicate.myPoint && duplicate.decade) {
                return decadeY - 98
              } else if (!duplicate.myPoint && duplicate.decade) {
                return decadeY - defaultY
              } else if (duplicate.myPoint && !duplicate.decade) {
                return decadeY - defaultY
              } else if (duplicate2.decade) {
                return decadeY - 40
              } else {
                return decadeY - defaultY
              }
            })
            .attr('y2', decadeY)
            .attr('stroke', '#28a8a8')

            markerAfter10Year.append('circle')
            .attr('cx', decadeX)
            .attr('cy', () => {
              if(duplicate.myPoint && duplicate.decade) {
                return decadeY - defaultY - 40
              } else if (!duplicate.myPoint && duplicate.decade) {
                return decadeY - defaultY
              } else if (duplicate.myPoint && !duplicate.decade) {
                return decadeY - defaultY
              } else if (duplicate2.decade) {
                return decadeY - 25
              } else {
                return decadeY - defaultY
              }
            })
            .attr('r', r)
            .attr('fill', '#28a8a8')

          markerAfter10Year.append('text')
            .attr('x', decadeX)
            .attr('y', () => {
              if(duplicate.myPoint && duplicate.decade) {
                return decadeY - defaultY - 40
              } else if (!duplicate.myPoint && duplicate.decade) {
                return decadeY - defaultY
              } else if (duplicate.myPoint && !duplicate.decade) {
                return decadeY - defaultY
              } else if (duplicate2.decade) {
                return decadeY - 25
              } else {
                return decadeY - defaultY
              }
            })
            .attr('fill', '#ffffff')
            .attr("text-anchor", "middle")
            .style('font-size', 9)
            .style('font-weight', 'bold')
            .text('10년후')

          markerAfter10Year.append('text')
            .attr('x', decadeX)
            .attr('y', () => {
              if(duplicate.myPoint && duplicate.decade) {
                return decadeY - defaultY - 30
              } else if (!duplicate.myPoint && duplicate.decade) {
                return decadeY - defaultY + 10
              } else if (duplicate.myPoint && !duplicate.decade) {
                return decadeY - defaultY + 10
              } else if (duplicate2.decade) {
                return decadeY - 15
              } else {
                return decadeY - defaultY + 10
              }
            })
            .attr('fill', '#ffffff')
            .attr("text-anchor", "middle")
            .style('font-size', 9)
            .style('font-weight', 'bold')
            .text('예측')
        }
        // draw gradient bar
        var gradientBar = chart.append("g")
          .attr('class', 'bottom-bar')
          .attr("transform", `translate(30, ${height - GradientBarHeight + 1})`)
        
        // console.log('barIndex', barIndex[0] + 1)
        // console.log('length', barIndex.length)

        var defaultWidth = d3.select(obj +' > svg > g > .x-axis > rect').attr('width')
        console.log('defaultWidth', defaultWidth)
        // DB에서 받아오는 구분 값에 따라 width를 계산해 주기위한 함수
        // num 에는 [] 배열값
        // width 에는 각 막대그래프 하나의 넓이가 들어간다.
        function calcWidth(num, width) {
          return (num + 1) * width
        }

        var firstDivideWidth = calcWidth(barIndex[0] + 3, defaultWidth);
        var secondDivideWidth = calcWidth(barIndex[1] + 3, defaultWidth);
        var thirdDivideWidth = calcWidth(barIndex[2] + 3, defaultWidth);
        var editWidth = 2;

        console.log('firstDivideWidth', firstDivideWidth)
        console.log('secondDivideWidth', secondDivideWidth)
        console.log('thirdDivideWidth', thirdDivideWidth)

        if(barIndex.length === 1) {
          
          var rect1 = gradientBar.append('rect')
            // .attr("rx", 15)
            .attr('height', 30)
            .attr('width', firstDivideWidth)
            .attr("fill", "url(#length1-1)")
            // .style('fill', '#6D8B6D')

          var rect2 = gradientBar.append('rect')
            // .attr("rx", 15)
            .attr('x', firstDivideWidth)
            .attr('height', 30)
            .attr('width', width - firstDivideWidth)
            .attr("fill", "url(#length1-2)")
            // .attr('fill', '#E46460')

          var gradientText1 = gradientBar.append('text')
          var gradientText2 = gradientBar.append('text')

          gradientText1
            .attr('x', firstDivideWidth / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[0])
            .style('font-size', 12)
            .style('fill', '#ffffff')
  
          gradientText2
            .attr('x', (rect1.attr('width') * 2 + (width - firstDivideWidth) ) / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[1])
            .style('font-size', 12)
            .style('fill', '#ffffff')
        }

        if(barIndex.length === 2) {

          var rect1 = gradientBar.append('rect')
            // .attr("rx", 15)
            .attr("r", 15)
            .attr('height', 30)
            .attr('width', firstDivideWidth)
            .attr("fill", "url(#length2-1)")

          var rect2 = gradientBar.append('rect')
            .attr('x', firstDivideWidth - editWidth)
            .attr('height', 30)
            .attr('width', secondDivideWidth - firstDivideWidth + editWidth)
            .attr("fill", "url(#length2-2)")

          var rect3 = gradientBar.append('rect')
            .attr('x', secondDivideWidth - editWidth)
            .attr('height', 30)
            .attr('width', width - secondDivideWidth + editWidth)
            .attr("fill", "url(#length2-3)")

          var gradientText1 = gradientBar.append('text')
          var gradientText2 = gradientBar.append('text')
          var gradientText3 = gradientBar.append('text')

          gradientText1
            .attr('x', firstDivideWidth / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[0])
            .style('font-size', 12)
            .style('fill', '#ffffff')
  
          gradientText2
            .attr('x', (rect1.attr('width') * 2 + (secondDivideWidth - firstDivideWidth) ) / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[1])
            .style('font-size', 12)
            .style('fill', '#ffffff')

          gradientText3
            .attr('x', (secondDivideWidth * 2 + (width - secondDivideWidth) ) / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[2])
            .style('font-size', 12)
            .style('fill', '#ffffff')
        }
        if(barIndex.length === 3) {

          var rect1 = gradientBar.append('rect')
            // .attr("rx", 15)
            .attr('height', 30)
            .attr('width', firstDivideWidth)
            .attr("fill", "url(#length3-1)")

          var rect2 = gradientBar.append('rect')
            .attr('x', firstDivideWidth - editWidth)
            .attr('height', 30)
            .attr('width', secondDivideWidth - firstDivideWidth + editWidth)
            .attr("fill", "url(#length3-2)")

          var rect3 = gradientBar.append('rect')
            .attr('x', secondDivideWidth - editWidth)
            .attr('height', 30)
            .attr('width', thirdDivideWidth - secondDivideWidth + editWidth)
            .attr("fill", "url(#length3-3)")

          var rect4 = gradientBar.append('rect')
            .attr('x', thirdDivideWidth - editWidth)
            .attr('height', 30)
            .attr('width', width - thirdDivideWidth + editWidth)
            .attr("fill", "url(#length3-4)")

          var gradientText1 = gradientBar.append('text')
          var gradientText2 = gradientBar.append('text')
          var gradientText3 = gradientBar.append('text')
          var gradientText4 = gradientBar.append('text')

          gradientText1
            .attr('x', firstDivideWidth / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[0])
            .style('font-size', 12)
            .style('fill', '#ffffff')

          gradientText2
            .attr('x', (rect1.attr('width') * 2 + (secondDivideWidth - firstDivideWidth) ) / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[1])
            .style('font-size', 12)
            .style('fill', '#ffffff')

          gradientText3
            .attr('x', (secondDivideWidth * 2 + (thirdDivideWidth - secondDivideWidth) ) / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[2])
            .style('font-size', 12)
            .style('fill', '#ffffff')

          gradientText4
            .attr('x', (thirdDivideWidth * 2 + (width - thirdDivideWidth) ) / 2)
            .attr('y', 20)
            .attr("text-anchor", "middle")
            .text(division[3])
            .style('font-size', 12)
            .style('fill', '#ffffff')
        }
          
        
          // .attr("fill", "url(#linear-gradient)")

        // const gradientText1 = gradientBar.append('text')
        // const gradientText2 = gradientBar.append('text')
        // const gradientText3 = gradientBar.append('text')
        // const gradientText4 = gradientBar.append('text')

        // if(division.length === 2) {
          // gradientText1
          //   .attr('x', margin.left)
          //   .attr('y', 20)
          //   .attr("text-anchor", "middle")
          //   .text(division[0])
          //   .style('font-size', 12)
          //   .style('fill', '#ffffff')
  
          // gradientText2
          //   .attr('x', width - margin.right)
          //   .attr('y', 20)
          //   .attr("text-anchor", "middle")
          //   .text(division[1])
          //   .style('font-size', 12)
          //   .style('fill', '#ffffff')

        // } else if(division.length === 3) {
        //   gradientText1
        //     .attr('x', margin.left)
        //     .attr('y', 20)
        //     .attr("text-anchor", "middle")
        //     .text(division[0])
        //     .style('font-size', 12)
        //     .style('fill', '#ffffff')

        //   gradientText2
        //     .attr('x', margin.left + 200)
        //     .attr('y', 20)
        //     .attr("text-anchor", "middle")
        //     .text(division[1])
        //     .style('font-size', 12)
        //     .style('fill', '#ffffff')

        //   gradientText3
        //     .attr('x', width - margin.right)
        //     .attr('y', 20)
        //     .attr("text-anchor", "middle")
        //     .text(division[2])
        //     .style('font-size', 12)
        //     .style('fill', '#ffffff')
        // } else if (division.length === 4){
        //   gradientText1
        //     .attr('x', margin.left)
        //     .attr('y', 20)
        //     .attr("text-anchor", "middle")
        //     .text(division[0])
        //     .style('font-size', 12)
        //     .style('fill', '#ffffff')

        //   gradientText2
        //     .attr('x', margin.left + 130)
        //     .attr('y', 20)
        //     .attr("text-anchor", "middle")
        //     .text(division[1])
        //     .style('font-size', 12)
        //     .style('fill', '#ffffff')

        //   gradientText3
        //     .attr('x', 320)
        //     .attr('y', 20)
        //     .attr("text-anchor", "middle")
        //     .text(division[2])
        //     .style('font-size', 12)
        //     .style('fill', '#ffffff')
          
        //   gradientText4
        //     .attr('x', width - margin.right)
        //     .attr('y', 20)
        //     .attr("text-anchor", "middle")
        //     .text(division[3])
        //     .style('font-size', 12)
        //     .style('fill', '#ffffff')
        // }
        
  
        // gradientBar.append('text')
        //   .attr('x', margin.left)
        //   .attr('y', 20)
        //   .attr("text-anchor", "middle")
        //   .text('보통')
        //   .style('font-size', 12)
        //   .style('fill', '#ffffff')
  
        // gradientBar.append('text')
        //   .attr('x', width - margin.right)
        //   .attr('y', 20)
        //   .attr("text-anchor", "middle")
        //   .text('주의')
        //   .style('font-size', 12)
        //   .style('fill', '#ffffff')
        
        // side text area
        const downTextArea = chart.append('g')
          .attr('class', 'text-area')
          .attr('transform', `translate(-15, ${height - 22})`)
          .attr("text-anchor", "middle")
        downTextArea.append('text').text('항목')
          .attr('font-size', 10)
        downTextArea.append('text').text('낮아짐')
          .attr('transform', `translate(0, 20)`)

        const upTextArea = chart.append('g')
          .attr('class', 'text-area')
          .attr('transform', `translate(${width + 70}, ${height - 22})`)
          .attr("text-anchor", "middle")
        upTextArea.append('text').text('항목')
          .attr('font-size', 10)
        upTextArea.append('text').text('높아짐')
          .attr('transform', `translate(0, 20)`)
      }
    })
  </script>
</html>